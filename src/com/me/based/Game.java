package com.me.based;

import java.awt.Canvas;
import java.awt.Color;
import java.awt.Dimension;
import java.awt.Font;
import java.awt.Graphics;
import java.awt.Graphics2D;
import java.awt.Polygon;
import java.awt.Rectangle;
import java.awt.Stroke;
import java.awt.geom.AffineTransform;
import java.awt.image.BufferStrategy;
import java.awt.image.BufferedImage;
import java.awt.image.DataBufferInt;

import javax.swing.JFrame;

import com.me.based.entity.mob.Oppo;
import com.me.based.entity.mob.Player;
import com.me.based.graphics.Screen;
import com.me.based.input.Keyboard;
import com.me.based.input.Mouse;
import com.me.based.level.Level;
import com.me.based.level.RandomLevel;
import com.me.based.level.SpawnLevel;
import com.me.based.level.TileCoordinate;
import com.me.based.level.tile.Tile;

public class Game extends Canvas implements Runnable {

	private static final long serialVersionUID = 1L;
	public static String title = "Based";
	public static int scale = 3;
	public static int width = 300;
	public static int height = 168;

	private Thread thread;
	private JFrame frame;
	private Keyboard key;
	private Mouse mouse;
	private Level level;
	private Player player;
	private Oppo oppo;

	private int updated = 0;

	private boolean running = false;

	private Screen screen;

	//an image with an accessible buffer
	private BufferedImage image = new BufferedImage(width, height, BufferedImage.TYPE_INT_RGB);
	//this converts the image object into an array of integers
	private int[] pixels = ((DataBufferInt) image.getRaster().getDataBuffer()).getData();

	public Game() {
		Dimension size = new Dimension(width * scale, height * scale);
		this.setPreferredSize(size);
		screen = new Screen(width, height);
		frame = new JFrame();

		//listen for keyboard inputs
		key = new Keyboard();
		//listen for mouse input
		mouse = new Mouse();

		//inits level
		level = Level.spawn;
		level.set_spawn(40, 35);
		level.set_tile(39, 34, Tile.col_test);
		//sets the player spawn
		TileCoordinate player_spawn = new TileCoordinate(500 / 16, 280 / 16);
		//inits the player
		player = new Player(key, player_spawn.get_x(), player_spawn.get_y());
		player.init_level(level);
		//inits the mob
		oppo = new Oppo(player_spawn.get_x() - 32, player_spawn.get_y());
		oppo.init_level(level);

		this.addKeyListener(key);
		this.addMouseListener(mouse);
		this.addMouseMotionListener(mouse);
	}

	public synchronized void start() {
		running = true;
		thread = new Thread(this, "Display");
		thread.start();
	}

	public synchronized void stop() {
		running = false;
		try {
			thread.join();
		} catch (InterruptedException e) {
			e.printStackTrace();
		}
	}

	// will loop forever as long as the thread is active
	public void run() {

		//gets focus for the window
		this.requestFocus();

		long last_time = System.nanoTime();
		long timer = System.currentTimeMillis();
		//1000000000 is 1 second in nano seconds
		//ns divides up that second into x number of frames
		final double ns = 1000000000.0 / 60.0;
		double delta = 0;
		int frames = 0;
		int updates = 0;
		while (running) {
			long now = System.nanoTime();
			delta += (now - last_time) / ns;
			last_time = now;
			// update is only called x times per second per ns variable
			while (delta >= 1) {
				update();
				updates++;
				delta--;
			}

			// render is called as fast as can be handled
			render();
			frames++;

			//this is only run every 1000 milliseconds = 1 second
			if (System.currentTimeMillis() - timer > 1000) {
				timer += 1000;
				frame.setTitle(title + "  |  " + updates + " ups, " + frames + " FPS");
				updates = 0;
				frames = 0;
				updated = (updated += 45) % 360;
			}
		}
		stop();
	}

	public void update() {
		key.update();
		player.update();
		oppo.update();
	}

	public void render() {
		// assign the bs of the canvas to bs
		BufferStrategy bs = this.getBufferStrategy();

		// if the bufferstrategy doesn't exist, create it
		if (bs == null) {
			this.createBufferStrategy(3);
			return;
		}

		screen.clear();
		//renders the level and sets the player in the centre
		level.render(player.get_x() - (width / 2), player.get_y() - (height / 2), screen);
		//render the player
		player.render(screen);

		oppo.render(screen);
		//assign all the pixels generated by screen class into pixels for rendering
		for (int i = 0; i < pixels.length; i++) {
			pixels[i] = screen.pixels[i];
		}

		Graphics2D g = (Graphics2D) bs.getDrawGraphics();
		// all drawing to screen happens between here and dispose() method
		g.drawImage(image, 0, 0, getWidth(), getHeight(), null);

		g.setColor(Color.WHITE);
		g.setFont(new Font("Verdana", 0, 50));
		g.drawString("x " + player.get_x() + "  y " + player.get_y(), 500, 430);
		//g.setColor(Color.GREEN);
		//g.drawString("x " + oppo.get_x() + "  y " + oppo.get_y(), 500, 330);

		//g.drawString(Integer.toString(Mouse.getx()), 400, 480);
		//g.drawString(Integer.toString(Mouse.gety()), 400, 380);
		g.drawRoundRect(16, height*3-100, 90, 90, 10, 10);
		//drawing the arrow
		draw_arrow(g);
		
		

		//dispose of graphics and display on screen
		g.dispose();
		bs.show();
	}

	//draws arrow on screen which points to current oppo
	public void draw_arrow(Graphics2D g) {
		double dy;
		double dx;
		if (player.get_x() <= oppo.get_x()) {
			dy = oppo.get_y() - player.get_y();
			dx = oppo.get_x() - player.get_x();
		} else {
			dy = player.get_y() - oppo.get_y();
			dx = player.get_x() - oppo.get_x();
		}

		g.setColor(Color.RED);
		int seg = 8;
		int ox = 85;
		int oy = height*3-72;

		Rectangle rect = new Rectangle(30, height*3-60, 60, 10);
		Polygon poly;
		poly = new Polygon(new int[] { ox, ox + seg * 2, ox }, new int[] { oy, oy + seg * 2, oy + seg * 4 }, 3);

		//if player is below the oppo, draw arrow point one side, else the other
		if (player.get_x() > oppo.get_x()) {
			poly = new Polygon(new int[] { ox - 50, ox - 50 - seg * 2, ox - 50 }, new int[] { oy, oy + seg * 2, oy + seg * 4 }, 3);
		} else {
			poly = new Polygon(new int[] { ox, ox + seg * 2, ox }, new int[] { oy, oy + seg * 2, oy + seg * 4 }, 3);
		}

		//set rotation anchor for arrow
		double rotx = rect.getX() + rect.width / 2;
		double roty = rect.getY() + rect.height / 2;

		if (player.get_x() < oppo.get_x()) {
			g.rotate(Math.atan2(dy, dx), rotx, roty);
		} else {
			g.rotate(Math.atan2(dy, dx), rotx, roty);

		}
		g.fill(rect);
		g.fillPolygon(poly);
	}

	public static void main(String[] args) {
		Game game = new Game();
		game.frame.setResizable(false);
		game.frame.setTitle(title);
		game.frame.add(game);
		game.frame.pack();
		game.frame.setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);
		game.frame.setLocationRelativeTo(null);
		game.frame.setVisible(true);
		game.start();
	}

}
